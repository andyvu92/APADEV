<pre>";
  //print fake_encrypt();
  //print "</pre>";
}

/**
 * Helper function to create login form for JWT SSO Targets.
 */
function apa_get_sso_login_form($form, &$form_state) {
  $form['username'] = [
    '#type'          => 'textfield',
    '#title'         => "Email",
    '#size'          => 50,
    '#required'      => true,
    '#description'   => "Enter your membership email.",
  ];

  $form['password'] = [
    '#type'          => 'password',
    '#title'         => "Password",
    '#size'          => 50,
    '#required'      => true,
    '#description'   => "Enter your password.",
  ];

  $form['submit'] = [
    '#type'          => 'submit',
    '#value' => t('Login'),
  ];

  return $form;
}

function apa_get_sso_login_form_submit($form, &$form_state){
  $email =  $form_state['values']['username'];
  $password =  $form_state['values']['password'];
  try{
      app_sso_get_user_info($email, $password, TRUE);
      if(isset($_GET['destination'])){
        drupal_goto(drupal_get_destination());
      } else {
        drupal_goto("/");
      }
  }catch (Exception $e){
    form_set_error("Can't connect.",$e->getMessage());
    $form_state['redirect'] = "/apa/sso/login";
    return;
  }
}

/**
 * cpd4phsyio Stuff.
 */
function _apa_sso_redirect_to_cpd4physio()
{
  //Check if user is logged in if not get the user to Login page
  if (!isset($_SESSION['TokenId'])) {
    drupal_goto("/apa/sso/login", ['query' => ['destination' => 'sso/redirect-cpd4physio']]);
  }

  $user_details =  app_sso_user_details($_SESSION['UserId'], $_SESSION['TokenId']);
  $array = reset($user_details['results']);
  $token = apa_sso_get_token(['user_info'=>drupal_json_encode($array)]);


  $target_argument = variable_get('apa_sso_target_sso_arg', '');
  $target_path = variable_get('apa_sso_target_sso_url', '');
  $target_auth_server = variable_get('apa_sso_target_aud', '');
  $target_url = _apa_sso_get_target_url($token, $target_argument, $target_path, $target_auth_server);
  //die($target_url);
  drupal_goto($target_url);

}


function _apa_sso_get_target_url($token,$target_argument, $target_path, $target_auth_server) {
  return $target_auth_server."/".$target_path."?".$target_argument."=".$token;  
}

function _apa_sso_source() {
 if(isset($_GET['token'])) {
   
     // A private key
    $jwk = _apa_sso_get_private_jwk();

    // We create our loader .
    $loader = new Loader();

    // This is the input we want to load verify.
    
    $input = $_GET['token'];

    // The payload is decrypted using our key.
    $jwe = $loader->loadAndDecryptUsingKey(
      $input,
      $jwk,
      ['ECDH-ES'],
      ['A128CBC-HS256']
    );
    $playload = $jwe->getPayload();
    
    if(sizeof($playload) > 0) {
      if(time() >= $playload['exp']){
        watchdog(APA_SSO_WATCHDOG, "Token has expired", array(), WATCHDOG_CRITICAL);
        drupal_set_message("Token Expired");
        drupal_goto("/");
      }
      $user_info = app_sso_get_user_info($playload['username'],$playload['password']);
      if(!$user_info) {
        $response = ["error"=>"Invalid username or password","extra_info" => $playload['username']];
      } else {
        $response = ["user_info" => $user_info];
      }

      // Create token from 3rdParty JWKs
      $token = apa_sso_get_token($response);
      $target_argument = variable_get('apa_sso_target_sso_arg', '');
      $target_path = variable_get('apa_sso_target_sso_url', '');
      $target_auth_server = variable_get('apa_sso_target_aud', '');
      $target_url = _apa_sso_get_target_url($token, $target_argument, $target_path, $target_auth_server);
      //die($target_url);
      drupal_goto($target_url);

    } else {
        watchdog(APA_SSO_WATCHDOG, "Play load Not Valid from Source", array(), WATCHDOG_CRITICAL);
        $target_path = variable_get('apa_sso_target_sso_url', '');
        drupal_goto($target_path);
    }

  } else {
     watchdog(APA_SSO_WATCHDOG, "No Token Found", array(), WATCHDOG_CRITICAL);
     drupal_set_message("Token Not Found");
     drupal_goto("/");
  }
}

function _apa_sso_generate_jwk() {
  
  // A private key
  $jwk = _apa_sso_get_private_jwk();

  $public_key = ["keys"=>[$jwk->toPublic()]];
  //return drupal_json_output($rotatable_key_set);
  return drupal_json_output($public_key);
}

function app_sso_get_user_info($email_address, $password, $login=TRUE) {
    $base_url = variable_get('aptify_api_base_url', &quot;<a href="https://protect-au.mimecast.com/s/7VFcCnxyDzTmlJYs9I_I9?domain=aptifyweb.australian.physio">https://aptifyweb.australian.physio/AptifyServicesAPI/services</a>&quot;);

    $parameters = [
      'UserName' => $email_address,
      'Password' => $password
    ];

    // This step is important as it filters out any malicious code.
    $query = drupal_http_build_query($parameters);

    $login_path = "/Authentication/Login/Web?".$query;

    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $base_url . $login_path);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

    $headers = array();
    $headers[] = "Content-Type: application/json";
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    $response_status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);

    if (curl_errno($ch)) {
      $message_detail = 'Error:' . curl_error($ch);
      throw new AptifyFailure($message_detail);
    }

    curl_close ($ch);
    // Request authentication and HTTP response check.
    //$response = drupal_http_request($base_url . $login_path, $options);
    if ($response_status_code != 200 || $response_status_code == 400) {
      watchdog(APA_SSO_WATCHDOG, $result, array(), WATCHDOG_CRITICAL);
      return FALSE;
    }

    $response = new stdClass();
    $response->data = $result;

    // Response decode and decode check.
    $r = drupal_json_decode($response->data);
    if ($r === NULL) {
      $message_detail = 'JSON decode failure: ' . $response->data;
      watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_CRITICAL);
      return FALSE;
    }

    // Aptify response status.
    if (isset($r['ErrorInfo']) === TRUE) {
      $message_detail = 'aptify error detected: ' . $r['ErrorInfo']->ErrorMessage;
      watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_INFO);
      return FALSE;
    }
    else {
      if (!($r['UserId'] || $r['TokenId'])) {
        $message_detail = 'No UserId or Token found.';
        watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_INFO);
        return FALSE;
      }

      $user_details =  app_sso_user_details($r['UserId'], $r['TokenId']);

      if(!$user_details) {
        $message_detail = 'Can\'t get user information.';
        watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_INFO);
        return FALSE;
      }
	    if($login) {
        // If all okay we will  set data to the session.
        $_SESSION['Log-in'] = "in";
        foreach($r as $key=>$value) {
          $_SESSION[$key] = $value;
        }
        $data = "UserID=".$_SESSION["UserId"];
        $details = aptify_get_GetAptifyData("4", $data,"");
        newSessionStats($details["MemberTypeID"], $details["MemberType"], $details["Status"],$details["PersonSpecialisation"],$details["PaythroughtDate"],$details["Nationalgp"]);
        nameUpdate($details["Firstname"], $details["Preferred-name"]);
      }
	    return drupal_json_encode(reset($user_details['results']));
    }
  }

function app_sso_user_details($user_id, $token) {
  $base_url = variable_get('aptify_api_base_url', &quot;<a href="https://protect-au.mimecast.com/s/7VFcCnxyDzTmlJYs9I_I9?domain=aptifyweb.australian.physio">https://aptifyweb.australian.physio/AptifyServicesAPI/services</a>&quot;);

  // This step is important as it filters out any malicious code.
  $query = drupal_http_build_query(['UserId'=>$user_id]);

  $path = "/DataObjects/spGetMemberDetailsForSSO__c?".$query;

  $ch = curl_init();

  curl_setopt($ch, CURLOPT_URL, $base_url . $path);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

  $headers[]="AptifyAuthorization: Web ".$token;
  $headers[] = "Content-Type: application/json";
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

  $result = curl_exec($ch);
  $response_status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);

  if (curl_errno($ch)) {
    $message_detail = 'Error:' . curl_error($ch);
    watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_CRITICAL);
  }

  curl_close ($ch);

  if ($response_status_code != 200 || $response_status_code == 400) {
    watchdog(APA_SSO_WATCHDOG, $result, array(), WATCHDOG_CRITICAL);
    return FALSE;
  }

  $response = new stdClass();
  $response->data = $result;

  // Response decode and decode check.
  $r = drupal_json_decode($response->data);
  if ($r === NULL) {
    $message_detail = 'JSON decode failure: ' . $response->data;
    watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_CRITICAL);
    return FALSE;
  }

  // Aptify response status.
  if (isset($r['ErrorInfo']) === TRUE) {
    $message_detail = 'aptify error detected: ' . $r['ErrorInfo']->ErrorMessage;
    watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_INFO);
    return FALSE;
  }
  else {
    return $r;
  }
}

/**
 * @return \Jose\Object\JWK|\Jose\Object\JWKInterface|null
 */
function _apa_sso_get_private_jwk() {
  $private_jwk = NULL;
  if ($cache = cache_get('apa_sso_private_jwk')) {
    $private_jwk = $cache->data;
  }
  else {
    $private_jwk = \Jose\Factory\JWKFactory::createECKey(['crv'=>'P-521','use'=>'enc']);
    cache_set('apa_sso_private_jwk', $private_jwk, 'cache');
  }
  return $private_jwk;
}


