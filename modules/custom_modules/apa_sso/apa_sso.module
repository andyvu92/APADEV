<?php
/**
 * @file
 *
 * Functionality for Single Signon
 *
 * @author Web Prophets
 */
require_once __DIR__."/vendor/autoload.php";
require_once "apa_sso_admin.inc";
use Jose\Object\JWKSet;
use Jose\Factory\JWEFactory;
use Jose\Loader;
use Jose\Factory\JWKFactory;
use Jose\Encrypter;
use Jose\Object\Recipient;
use Jose\Decrypter;
use Jose\Object\JWK;
define("APA_SSO_WATCHDOG","APA_SSO");
/**
 * Implements hook_permission().
 */
function apa_sso_permission()
{
  //setting module permissions
  return [
    'access sso settings' => [
      'title' => t('access sso settings'),
      'description' => t('Access SSO Settings'),
    ],
  ];
}
/*
 * Implementation of hook_menu
 */
function apa_sso_menu()
{
  $items = [];
  $items['admin/config/sso'] = [
    'title' => "APA SSO Settings",
    'description' => "Various field for generating JWT Encoded URL.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apa_sso_admin'),
    'access arguments' => array('access sso settings'),
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['sso/redirect-cpd4physio'] = [
    'title' => "apa SSO Test",
    'page callback' => '_apa_sso_redirect_to_cpd4physio',
    'page arguments' => [],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];
  $items['sso/redirect-jobs4physio'] = [
    'title' => "apa SSO Test",
    'page callback' => '_apa_sso_redirect_to_cpd4physio',
    'page arguments' => [],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];
  // A test path to
  $items['apa/sso/test'] = [
    'title' => "apa SSO Test",    
    'page callback' => '_apa_sso_test',
    'page arguments' => [],
    'access callback' => '_apa_card_logged_in',
    'type' => MENU_CALLBACK,
  ];
  // This path will output JWKs for origins(Third Party Websites).
  $items['apa/sso/jwks'] = [
    'title' => "apa SSO Test",
    'page callback' => '_apa_sso_generate_jwk',
    'page arguments' => [],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];
  // This is where origins will pass their token through "Token" Argument
  $items['apa/sso'] = [
    'title' => "apa SSO Test",
    'page callback' => '_apa_sso_source',
    'page arguments' => [],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];
  /**
   * FOR COMMUNITY BRANDS LOGIN.
   */
  $items['apa/cm/login'] = [
    'title' => "Login to continue",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['apa_get_cm_login_form'],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];
  /**
   * For cpd4Phsyio login
   */
  $items['apa/sso/login'] = [
    'title' => "Login to continue",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['apa_get_sso_login_form'],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];
  return $items;
}
/**
 * Helper function to create login form for Community Brands.
 */
function apa_get_cm_login_form($form, &$form_state) {
  /**
   * If goto variable is given it will hide the radio and save values in hidden.
   * Otherwise nothing will be selected and user must select the option.
   */
  $default_login = _apa_cm_get_member_type_from_goto();
  if(isset($_SESSION['TokenId']) && $default_login) {
    $user_details =  app_sso_user_details($_SESSION['UserId'], $_SESSION['TokenId']);
    $redirect_url = _apa_cm_get_redirection_url($user_details, $default_login);
    drupal_goto($redirect_url);
  }
  $form['username'] = [
    '#type'          => 'textfield',
    //jinghu added on 15/11/2018
    '#attributes' => array(
        ' class' => 'form-control',
				' placeholder' => 'Email address'
		),
    '#prefix'=>'<div class="flex-container"><div class="flex-cell"><div class="email-field">',
    '#suffix'=>'</div></div>',
    //added end	
    '#title'         => "Email",
    '#size'          => 50,
    '#required'      => true,
    
  ];
  $form['password'] = [
    '#type'          => 'password',
    //jinghu added on 15/11/2018
    '#attributes' => array(
      ' class' => 'form-control',
			' placeholder' => 'Password'
		),
    '#prefix'=>'<div class="flex-cell"><div class="password-field">',
    '#suffix'=>'</div></div>',
    //added end	
    '#title'         => "Password",
    '#size'          => 50,
    '#required'      => true,
   
  ];
  $login_as_options = [
    'employer' => 'Employer',
    'jobseeker' => 'Job-seeker'
  ];
  if($default_login) {
    $form['login_as'] = [
      '#type'=>'hidden',
      '#value'=> $default_login
    ];
  } else {
    $form['login_as'] = [
      '#type' => 'radios',
      '#title' => t('Login As'),
      '#attributes' => array(
        ' class' => 'styled-radio-select'
			 ),
      '#options' => $login_as_options,
      '#description' => t('Please select any of above option to login'),
      '#required' => true,
      //jinghu added on 15/11/2018
      '#prefix'=>'<div class="flex-cell"><div class="option-field">',
      '#suffix'=>'</div></div><div class="flex-cell forgot-password">
					<span>Visiting jobs4physio for the first time? <a href="https://www.jobs4physios.com.au/">Create login</a>
					</span>
					</div><div class="flex-cell create-account">
          <span>Not an APA member? <a href="/membership-question">Join today.</a></span>
        </div>',
        //added end
    ];

  }
  $form['submit'] = [
    '#type'          => 'submit',
    '#prefix'=>'<div class="flex-cell submit-container">',
    '#suffix'=>'</div></div>',	
    '#value' => t('Login'),
   
  ];
  return $form;
}
function apa_get_cm_login_form_submit($form, &$form_state){
  $email =  $form_state['values']['username'];
  $password =  $form_state['values']['password'];
  $login_as = $form_state['values']['login_as'];
  try{
    $user_details = drupal_json_decode(app_sso_get_user_info($email, $password));
  }catch (Exception $e){
    form_set_error("Can't connect.",$e->getMessage());
    $form_state['redirect'] = "/apa/cm/login";
    //jing hu put the log in failed meessage 15/11/2018
    drupal_set_message('<div class="checkMessage"><span>Incorrect username or password</span>.</div>',"error");
    return;
  }
  $redirect_url = _apa_cm_get_redirection_url($user_details,$login_as);
  $form_state['redirect'] = $redirect_url;
}
/**
 * Creates URL Redirection to Community Brands.
 * @param $user_details
 * @param $member_type
 *
 * @return string
 */
function _apa_cm_get_redirection_url($user_details, $member_type) {
  $return_url = '/apa/cm/login';
  if($user_details) {
    if(isset($user_details['results'])){
      $user_details = $user_details['results'][0];
    }
    $site_id = variable_get('apa_sso_cb_site_id', 21871);
    $params = [
      'site_id' => $site_id,
      'cust_code' => variable_get('apa_sso_cb_customer_code', 'APA1214'),
      'email' => $user_details['Email'],
      'member_number' => $user_details['Membernumber'],
      'first_name' => $user_details['Firstname'],
      'last_name' => $user_details['Lastname'],
      'company_name' => $user_details['Companyname'],
      'phonenumber' => $user_details['Lastname'],
      'company_address1' => $user_details['CompanyUnit'].$user_details['CompanyBuildingName'].$user_details['CompanyStreet'],
      'company_city' => $user_details['CompanyCity'],
      'company_state' => $user_details['CompanyState'],
      'company_zip' => $user_details['CompanyZip'],
      'company_country' => $user_details['CompanyCountry'],
      #'member_type' => $user_details['MemberType'] == 'Non-Member' ? "nonmember":"Members",
    ];
    if(isset($_REQUEST['goto'])){
      $params['goto'] = urldecode($_REQUEST['goto']);
    }
    $redirect_url = FALSE;
    if($member_type == "employer") {
      $redirect_url = "https://www.careerwebsite.com/r/login/autologin.cfm";
    } else {
      $redirect_url = "https://www.careerwebsite.com/c/login/autocreate.cfm";
    }
    if($redirect_url){
      $query = drupal_http_build_query($params);
      $return_url = $redirect_url."?".$query;
    }
  }
  return $return_url;
}
function _apa_cm_get_member_type_from_goto() {
  /**
   * If no goto let user choose what type they want thus return False.
   */
  if(!isset($_REQUEST['goto'])){
    return FALSE;
  }
  $goto = urldecode($_REQUEST['goto']);
  $type = explode("/",$goto);
  /**
   * If goto contains r which is for recruiter.
   */
  if($type[1]==='r') {
    return "employer";
  }
  if($type[1] === 'c'){
    return "jobseeker";
  }
  return FALSE;
}
/**
 * General SSO Functions
 */
function apa_sso_get_token($data=NULL)
{
  // Get JWKS from Target JWK URLs
  $jku_url = variable_get('apa_sso_target_key_url', '');
  $jwk_set = JWKFactory::createFromJKU($jku_url,TRUE ,null, 86400, TRUE);
  
  // Create playload
  $playload = [
    'jti' => 'somestring',
    'exp' => time()+(60*3),
  ];
  if($data){
    $playload['data'] = $data;
  }
  $playLoadJson = drupal_json_encode($playload);
  // Create JWE with playload and Algoritham
  $jwe = JWEFactory::createJWE(
    $playLoadJson,// The message to encrypt
    [
      'alg' => 'ECDH-ES',
      'enc' => 'A128CBC-HS256',
    ]
  );
  $jwe = $jwe->addRecipientInformation($jwk_set->selectKey('enc'));
  // Create encryption with the alogritham
  $encrypter = Encrypter::createEncrypter(
    ['ECDH-ES'], // The Key Encryption Algorithms to be used
    ['A128CBC-HS256'],             // The Content Encryption Algorithms to be used
    ['DEF']                        // The Compression Methods to be used
  );
  // Then we encrypt
  $encrypter->encrypt($jwe);
  
  return $jwe->toCompactJSON(0);
}
function _apa_sso_test() {
  //print "<pre>";
  //print fake_encrypt();
  //print "</pre>";
}
/**
 * Helper function to create login form for JWT SSO Targets.
 */
function apa_get_sso_login_form($form, &$form_state) {
  $form['username'] = [
    '#type'          => 'textfield',
    '#title'         => "Email",
    '#size'          => 50,
    '#required'      => true,
    '#description'   => "Enter your membership email.",
  ];
  $form['password'] = [
    '#type'          => 'password',
    '#title'         => "Password",
    '#size'          => 50,
    '#required'      => true,
    '#description'   => "Enter your password.",
  ];
  $form['submit'] = [
    '#type'          => 'submit',
    '#value' => t('Login'),
  ];
  return $form;
}
function apa_get_sso_login_form_submit($form, &$form_state){
  $email =  $form_state['values']['username'];
  $password =  $form_state['values']['password'];
  try{
      app_sso_get_user_info($email, $password, TRUE);
      if(isset($_GET['destination'])){
        drupal_goto(drupal_get_destination());
      } else {
        drupal_goto("/");
      }
  }catch (Exception $e){
    form_set_error("Can't connect.",$e->getMessage());
    $form_state['redirect'] = "/apa/sso/login";
    return;
  }
}
/**
 * cpd4phsyio Stuff.
 */
function _apa_sso_redirect_to_cpd4physio()
{
  //Check if user is logged in if not get the user to Login page
  if (!isset($_SESSION['TokenId'])) {
    drupal_goto("/apa/sso/login", ['query' => ['destination' => 'sso/redirect-cpd4physio']]);
  }
  $user_details =  app_sso_user_details($_SESSION['UserId'], $_SESSION['TokenId']);
  $array = reset($user_details['results']);
  $token = apa_sso_get_token(['user_info'=>drupal_json_encode($array)]);
  $target_argument = variable_get('apa_sso_target_sso_arg', '');
  $target_path = variable_get('apa_sso_target_sso_url', '');
  $target_auth_server = variable_get('apa_sso_target_aud', '');
  $target_url = _apa_sso_get_target_url($token, $target_argument, $target_path, $target_auth_server);
  //die($target_url);
  drupal_goto($target_url);
}
function _apa_sso_get_target_url($token,$target_argument, $target_path, $target_auth_server) {
  return $target_auth_server."/".$target_path."?".$target_argument."=".$token;  
}
function _apa_sso_source() {
 if(isset($_GET['token'])) {
   
     // A private key
    $jwk = _apa_sso_get_private_jwk();
    // We create our loader .
    $loader = new Loader();
    // This is the input we want to load verify.
    
    $input = $_GET['token'];
    // The payload is decrypted using our key.
    $jwe = $loader->loadAndDecryptUsingKey(
      $input,
      $jwk,
      ['ECDH-ES'],
      ['A128CBC-HS256']
    );
    $playload = $jwe->getPayload();
    
    if(sizeof($playload) > 0) {
      if(time() >= $playload['exp']){
        watchdog(APA_SSO_WATCHDOG, "Token has expired", array(), WATCHDOG_CRITICAL);
        drupal_set_message("Token Expired");
        drupal_goto("/");
      }
      $user_info = app_sso_get_user_info($playload['username'],$playload['password']);
      if(!$user_info) {
        $response = ["error"=>"Invalid username or password","extra_info" => $playload['username']];
      } else {
        $response = ["user_info" => $user_info];
      }
      // Create token from 3rdParty JWKs
      $token = apa_sso_get_token($response);
      $target_argument = variable_get('apa_sso_target_sso_arg', '');
      $target_path = variable_get('apa_sso_target_sso_url', '');
      $target_auth_server = variable_get('apa_sso_target_aud', '');
      $target_url = _apa_sso_get_target_url($token, $target_argument, $target_path, $target_auth_server);
      //die($target_url);
      drupal_goto($target_url);
    } else {
        watchdog(APA_SSO_WATCHDOG, "Play load Not Valid from Source", array(), WATCHDOG_CRITICAL);
        $target_path = variable_get('apa_sso_target_sso_url', '');
        drupal_goto($target_path);
    }
  } else {
     watchdog(APA_SSO_WATCHDOG, "No Token Found", array(), WATCHDOG_CRITICAL);
     drupal_set_message("Token Not Found");
     drupal_goto("/");
  }
}
function _apa_sso_generate_jwk() {
  
  // A private key
  $jwk = _apa_sso_get_private_jwk();
  $public_key = ["keys"=>[$jwk->toPublic()]];
  //return drupal_json_output($rotatable_key_set);
  return drupal_json_output($public_key);
}
function app_sso_get_user_info($email_address, $password, $login=TRUE) {
    $base_url = variable_get('aptify_api_base_url', "https://aptifyweb.australian.physio/AptifyServicesAPI/services");
    $parameters = [
      'UserName' => $email_address,
      'Password' => $password
    ];
    // This step is important as it filters out any malicious code.
    $query = drupal_http_build_query($parameters);
    $login_path = "/Authentication/Login/Web?".$query;
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $base_url . $login_path);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $headers = array();
    $headers[] = "Content-Type: application/json";
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    $result = curl_exec($ch);
    $response_status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    if (curl_errno($ch)) {
      $message_detail = 'Error:' . curl_error($ch);
      throw new AptifyFailure($message_detail);
    }
    curl_close ($ch);
    // Request authentication and HTTP response check.
    //$response = drupal_http_request($base_url . $login_path, $options);
    if ($response_status_code != 200 || $response_status_code == 400) {
      watchdog(APA_SSO_WATCHDOG, $result, array(), WATCHDOG_CRITICAL);
      return FALSE;
    }
    $response = new stdClass();
    $response->data = $result;
    // Response decode and decode check.
    $r = drupal_json_decode($response->data);
    if ($r === NULL) {
      $message_detail = 'JSON decode failure: ' . $response->data;
      watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_CRITICAL);
      return FALSE;
    }
    // Aptify response status.
    if (isset($r['ErrorInfo']) === TRUE) {
      $message_detail = 'aptify error detected: ' . $r['ErrorInfo']->ErrorMessage;
       watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_INFO);

      return FALSE;
    }
    else {
      if (!($r['UserId'] || $r['TokenId'])) {
        $message_detail = 'No UserId or Token found.';
        watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_INFO);
        return FALSE;
      }
      $user_details =  app_sso_user_details($r['UserId'], $r['TokenId']);
      if(!$user_details) {
        $message_detail = 'Can\'t get user information.';
        watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_INFO);
        return FALSE;
      }
        if($login) {
        // If all okay we will  set data to the session.
        $_SESSION['Log-in'] = "in";
        foreach($r as $key=>$value) {
          $_SESSION[$key] = $value;
        }
        $data = "UserID=".$_SESSION["UserId"];
        $details = aptify_get_GetAptifyData("4", $data,"");
        newSessionStats($details["MemberTypeID"], $details["MemberType"], $details["Status"],$details["PersonSpecialisation"],$details["PaythroughtDate"],$details["Nationalgp"]);
        nameUpdate($details["Firstname"], $details["Preferred-name"]);
      }
        return drupal_json_encode(reset($user_details['results']));
    }
  }
function app_sso_user_details($user_id, $token) {
  $base_url = variable_get('aptify_api_base_url', "https://aptifyweb.australian.physio/AptifyServicesAPI/services");
  // This step is important as it filters out any malicious code.
  $query = drupal_http_build_query(['UserId'=>$user_id]);
  $path = "/DataObjects/spGetMemberDetailsForSSO__c?".$query;
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $base_url . $path);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $headers[]="AptifyAuthorization: Web ".$token;
  $headers[] = "Content-Type: application/json";
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  $result = curl_exec($ch);
  $response_status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  if (curl_errno($ch)) {
    $message_detail = 'Error:' . curl_error($ch);
    watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_CRITICAL);
  }
  curl_close ($ch);
  if ($response_status_code != 200 || $response_status_code == 400) {
    watchdog(APA_SSO_WATCHDOG, $result, array(), WATCHDOG_CRITICAL);
    return FALSE;
  }
  $response = new stdClass();
  $response->data = $result;
  // Response decode and decode check.
  $r = drupal_json_decode($response->data);
  if ($r === NULL) {
    $message_detail = 'JSON decode failure: ' . $response->data;
    watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_CRITICAL);
    return FALSE;
  }
  if (isset($r['LinkId']) == "") {
    $message_detail = 'login failed: ' . $r['ErrorInfo']->ErrorMessage;
    watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_INFO);
    //jing hu put the log in failed meessage 15/11/2018
    drupal_set_message('<div class="checkMessage"><span>Incorrect username or password</span>.</div>',"error");
    return FALSE;
  }
  // Aptify response status.
  if (isset($r['ErrorInfo']) === TRUE) {
    $message_detail = 'aptify error detected: ' . $r['ErrorInfo']->ErrorMessage;
    watchdog(APA_SSO_WATCHDOG, $message_detail, array(), WATCHDOG_INFO);
    return FALSE;
  }
  
  else {
    return $r;
  }
}
/**
 * @return \Jose\Object\JWK|\Jose\Object\JWKInterface|null
 */
function _apa_sso_get_private_jwk() {
  $private_jwk = NULL;
  if ($cache = cache_get('apa_sso_private_jwk')) {
    $private_jwk = $cache->data;
  }
  else {
    $private_jwk = \Jose\Factory\JWKFactory::createECKey(['crv'=>'P-521','use'=>'enc']);
    cache_set('apa_sso_private_jwk', $private_jwk, 'cache');
  }
  return $private_jwk;
}