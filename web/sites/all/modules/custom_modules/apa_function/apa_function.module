<?php
/**
 * @file
 * APA's, Function Module.
 *
 * Functionality for Single Signon
 *
 * @author Web Prophets
 */

//require_once __DIR__."/vendor/autoload.php";
require_once __DIR__."/admin/apa_function_admin.inc";


/**
 * Implements hook_permission().
 */
function apa_function_permission()
{
    //setting module permissions
    return [
        'access function settings' => [
            'title' => t('access function module settings'),
            'description' => t('Access Function Settings'),
        ],
    ];
}

/*
 * Implementation of hook_menu
 */
function apa_function_menu()
{
    $items = [];

    // This form is for Administration Settings.
    // i.e., Global SAML URL etc.
    $items['admin/config/function'] = [
        'title' => "APA SSO Settings",
        'description' => "Set global variables for SAML.",
        'page callback' => 'drupal_get_form',
        'page arguments' => array('apa_function_admin'),
        'access arguments' => array('access function settings'),
        'type' => MENU_NORMAL_ITEM,
    ];
	$items['apa/checkemail'] = [
        'title' => "APA SSO Test",
        'page callback' => 'apa_function_checkemail_form',
        'page arguments' => ['1'],
        'access callback' => true,
        'type' => MENU_CALLBACK,
    ];
	$items['load/workplace'] = [
        'title' => "APA SSO Test",
        'page callback' => 'apa_function_loadworkplace_form',
        'page arguments' => ['6'],
        'access callback' => true,
        'type' => MENU_CALLBACK,
    ];
	$items['load/education'] = [
        'title' => "APA SSO Test",
        'page callback' => 'apa_function_loadeducation_form',
        'page arguments' => ['4'],
        'access callback' => true,
        'type' => MENU_CALLBACK,
    ];
	$items['user/addpaymentcard'] = [
        'title' => "Add payment card",
        'page callback' => 'apa_payment_card_form',
        'access callback' => true,
        'type' => MENU_CALLBACK,
    ];
    // The path where third party will come to login
    /*$items['apa/sso/login'] = [
        'title' => "APA SSO Test",
        'page callback' => 'drupal_get_page',
        'page arguments' => ['apa_sso_login_form'],
        'access callback' => true,
        'type' => MENU_CALLBACK,
    ];

  $items['apa/sso/login'] = [
    'title' => "APA SSO Test",
    'page callback' => 'drupal_get_page',
    'page arguments' => ['apa_sso_login_form'],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];

    // A test path to
    $items['apa/sso/test'] = [
        'title' => "APA SSO Test",
        'page callback' => '_apa_sso_test',
        'page arguments' => [],
        'access callback' => true,
        'type' => MENU_CALLBACK,
    ];
*/
    return $items;
}
function apa_payment_card_form() {
	return drupal_get_form('apa_create_payment_card_form');
}
/**
 * Page callback: Global function.
 *
 * @see apa_global_function_menu()
 */
function apa_function_init() {
	//$module_path = DRUPAL_ROOT."/".drupal_get_path('module','apa_function');
    //variable_set('apa_function_path',$module_path);
	include __DIR__."/Survey/SurveyFunction.inc.php";
	include __DIR__."/inc/Aptify/JSONarray.inc.php";
	include __DIR__."/inc/functions.inc";
	include __DIR__."/inc/TandC/TandCFunction.inc.php";
	include __DIR__."/inc/Aptify/SessionHandler.inc.php";
	//require_once dirname(__FILE__) . '/Survey/SurveyFunction.inc.php';
	//require_once dirname(__FILE__) . '/inc/Aptify/JSONarray.inc.php';
	//require_once dirname(__FILE__) . '/inc/functions.inc';
	//require_once dirname(__FILE__) . '/inc/TandC/TandCFunction.inc.php';
	//require_once dirname(__FILE__) . '/inc/Aptify/SessionHandler.inc.php';
}
function apa_function_updateBackgroundImage_form() {
    //$module_path = variable_get('apa_function_path','');
	/// in 'jointheAPA.inc.php', 'renewMyMembership.inc.php'
	/// 'yourdetail.inc.php', 'dashboard.inc.php'
    include __DIR__.'/commonFile/updateBackgroundImage.php';
   
}
function apa_function_customizeBackgroundImage_form() {
   /// in 'jointheAPA.inc.php', 'renewMyMembership.inc.php'
   /// 'yourdetail.inc.php', 'dashboard.inc.php'
    include __DIR__.'/commonFile/customizeBackgroundImage.php';
   
}
function apa_function_dashboardLeftNavigation_form() {
	/// in 'renewMyMembership.inc.php', 'yourdetail.inc.php'
	/// 'dashboard.inc.php'
    include __DIR__.'/commonFile/dashboardLeftNavigation.php';
   
}
function apa_function_loadworkplace_form() {
	/// in this file
    include __DIR__.'/commonFile/workplace.php';
   
}
function apa_function_loadeducation_form() {
	/// in this file
    include __DIR__.'/commonFile/education.php';
   
}
function apa_function_updateshoppingcart_form() {
	/// merged in function.inc
    include __DIR__.'/commonFile/updateShoppingCart.php';
}
function apa_function_updatewishlist_form() {
	/// not in use
    include __DIR__.'/commonFile/updateWishlist.php';
}
function apa_function_uploadImage_form() {
	/// merged / not in use
    include __DIR__.'/commonFile/uploadImage.php';
}
function apa_function_changeState_form() {
	/// not in use
    include __DIR__.'/commonFile/changeState.php';
}
function apa_function_login_form() {
    /// block
    include __DIR__."/inc/Login/login.inc.php";
}
function apa_function_forgot_password_form() {
    /// block
    include __DIR__."/inc/Login/forget-password.inc.php";
}
function apa_function_return_udsers_form() {
    /// page
    include __DIR__."/inc/Login/return-users-password.inc.php";
}
function apa_function_reset_password_from_email_form() {
    /// page
    include __DIR__."/inc/ResetPassword.inc.php";
}
function apa_function_change_existing_password_form() {
    /// block
    include __DIR__."/inc/changepassword.inc.php";
}
/**
 * Page Join Page.
 *
 * @see apa_function_menu()
 */
function apa_function_join_the_APA_form() {
    /// block
    include __DIR__."/inc/jointheAPA.inc.php";
}
function apa_function_join_your_detail_form() {
	/// in 'jointheAPA.inc.php'
    include __DIR__."/inc/jointheAPA/jointheAPA-yourdetail.inc.php";
}
function apa_function_join_the_apa_insurance_form() {
    /// in 'jointheAPA.inc.php'
    include __DIR__."/inc/jointheAPA/jointheAPA-insurance.inc.php";
}
function apa_function_join_the_apa_surveypayment_form() {
    /// in 'jointheAPA.inc.php'
    include __DIR__."/inc/jointheAPA/jointheAPA-surveypayment.inc.php";
}
function apa_function_join_the_apa_final_form() {
    /// in 'jointheAPA.inc.php'
    include __DIR__."/inc/jointheAPA/jointheAPA-final.inc.php";
}
function apa_function_join_the_apa_confirmation_form() {
    /// block
    include __DIR__."/inc/jointheAPA/jointheAPA-confirmation.inc.php";
}
function apa_function_checkemail_form() {
    /// in this file
    include __DIR__."/inc/jointheAPA/jointheAPA-checkEmail.php";
}

/**
 * Page Renew Page.
 *
 * @see apa_function_menu()
 */
function apa_function_renew_the_APA_form() {
    /// block
    include __DIR__."/inc/renewMyMembership.inc.php";
}
function apa_function_renew_your_detail_form() {
    /// in 'renewMyMembership.inc.php'
    include __DIR__."/inc/renewMyMembership/renew-yourdetail.inc.php";
}
function apa_function_renew_the_apa_insurance_form() {
    /// in 'renewMyMembership.inc.php'
    include __DIR__."/inc/renewMyMembership/renew-insurance.inc.php";
}
function apa_function_renew_the_apa_surveypayment_form() {
    /// in 'renewMyMembership.inc.php'
    include __DIR__."/inc/renewMyMembership/renew-surveypayment.inc.php";
}
function apa_function_renew_the_apa_final_form() {
    /// in 'renewMyMembership.inc.php'
    include __DIR__."/inc/renewMyMembership/renew-final.inc.php";
}
function apa_function_renew_the_apa_confirmation_form() {
    /// block
    include __DIR__."/inc/renewMyMembership/renew-confirmation.inc.php";
}

/**
 * Page Sign up Page.
 *
 * @see apa_function_menu()
 */
function apa_function_sign_up_form() {
    
    include __DIR__."/inc/Signup/signUp.inc.php";
}
/**
 * Page Your detail Page.
 *
 * @see apa_function_menu()
 */
function apa_function_your_detail_form() {
    /// block
    include __DIR__."/inc/yourdetail.inc.php";
}
function apa_function_your_dashboard_form() {
    /// block
    include __DIR__."/inc/dashboard.inc.php";
}
function apa_function_your_purchase_form() {
    /// block
    include __DIR__."/inc/yourpurchase.inc.php";
}
function apa_function_your_subscription_form() {
	/// block
    include __DIR__."/inc/subscriptions.inc.php";
}
/**
 * Page PD Page.
 *
 * @see apa_function_menu()
 */
function apa_function_pdsearch_form() {
    /// block
    include __DIR__."/inc/pdsearch.inc.php";
}
function apa_function_pdsearchresult_form() {
    /// block
    include __DIR__."/inc/pdsearchresult.inc.php";
}
function apa_function_pdshoppingcart_form() {
    /// page
    include __DIR__."/inc/pdshoppingcart.inc.php";
}
function apa_function_pdcomplete_form() {
    /// page
    include __DIR__."/inc/PDcomplete.inc.php";
}
function apa_function_pdwishlist_form() {
    /// page
    include __DIR__."/inc/pdwishlist.inc.php";
}
/**
 * Page Join the national group Page.
 *
 * @see apa_function_menu()
 */
function apa_function_joinng_form() {
    /// block
    include __DIR__."/inc/NationalGroupJoin/joinNG.inc.php";
}
function apa_function_ngshoppingcart_form() {
    /// not in use
    include __DIR__."/inc/NationalGroupJoin/NGShoppingCart.inc.php";
}
function apa_function_ngcomplete_form() {
    /// not in use
    include __DIR__."/inc/NationalGroupJoin/NGcomplete.inc.php";
}
/**
 * Page PRF donation Page.
 *
 * @see apa_function_menu()
 */
function apa_function_purchasePRF_form() {
    /// block
    include __DIR__."/inc/PRF/prf.inc.php";
}
/**
 * Page Survey Page.
 *
 * @see apa_function_menu()
 */
function apa_function_surveyquestions_form() {
    /// block   
    include __DIR__."/Survey/SurveyQuestions.inc.php";
}
function apa_function_surveyedit_form() {
    
    include __DIR__."/Survey/SurveyEdit.inc.php";
}
function apa_function_surveylist_form() {
 
    include __DIR__."/Survey/SurveyList.inc.php";
}
function apa_function_surveyquestionslist_form() {
    /// block
    include __DIR__."/Survey/SurveyQuestionsList.inc.php";
}
/**
 * National Group MT component
 *
 * @see apa_function_menu()
 */
function apa_function_NationalGroupsMT_form() {
    /// block
    include __DIR__."/inc/NationalGroupsMT.inc.php";
}
/**
 * National Group CPD diary
 *
 * @see apa_function_menu()
 */
function apa_function_CPD_diary_snapshot_form() {
    /// block
    include __DIR__."/inc/CPDdiarySnapShot.inc.php";
}
function apa_function_CPD_diary_form() {
    /// block
    include __DIR__."/inc/CPDdiary.inc.php";
}
/**
 * Find a physios
 *
 * @see apa_function_menu()
 */
function apa_function_Find_Physio_Main_Practice_form() {
    /// not in use
    include __DIR__."/inc/FindaPhysio/Main_Practice.php";
}
function apa_function_Find_Physio_Result_Practice_form() {
    /// not in use
    include __DIR__."/inc/FindaPhysio/Result_Practice.php";
}
function apa_function_Find_Physio_Detail_Practice_form() {
    /// not in use
    include __DIR__."/inc/FindaPhysio/Detail_Practice.php";
}
/**
 * SSO
 *
 * @see apa_function_menu()
 */
function apa_function_SSO_form() {
    /// not in use
    include __DIR__."/inc/Login/SSO.inc.php";
}
function apa_function_SLO_form() {
    /// not in use
    include __DIR__."/inc/Login/SLO.inc.php";
}
function apa_function_SAML_login_form() {
    /// not in use
    include __DIR__."/inc/Login/SAMLlogin.php";
}
//create log in form
function apa_create_log_in_form($form, &$form_state){
	$form['id'] = array(
		'#type' => 'textfield',
		'#prefix'=>'<div class="flex-cell email-field">',
		'#suffix'=>'</div>',
		'#attributes' => array(
			
			' class' => 'form-control',
			' placeholder' => 'Email address',
		),
		'#default_value' => isset($_COOKIE["member_login"])?$_COOKIE["member_login"]:'',
		'#required' => TRUE,
	);
	$form['password'] = array(
		'#type' => 'password',
	    '#prefix'=>'<div class="flex-cell password-field">',
		'#suffix'=>'</div><div class="flex-cell checkmessage" style="display: none">
						<span>Incorrect username or password</span>
					</div>',
		'#attributes' => array(
			' value' => isset($_COOKIE["member_password"])?$_COOKIE["member_password"]:'',
			' class' => 'form-control',
			' placeholder' => 'Password',
		),
		//'#default_value' => isset($_COOKIE["member_password"])?$_COOKIE["member_password"]:'',
		'#required' => TRUE,
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#prefix'=>'<div class="flex-cell login-btn">',
		'#suffix'=>'</div>',		
		'#value' => t('Login'),
		'#submit'=>['log_in'],
		
	); 
	$form['remember'] = array(
		'#type' => 'checkbox',
		'#prefix'=>'<div class="flex-cell"><div class="flex-col-5 remember-opt">',
		'#suffix'=>'</div><div class="flex-col-7 forgot-password">
					<span>Forgot your <a href="/forget-password">username/password</a>
					</span>
					</div></div>',
		'#default_value' => isset($_COOKIE["member_login"])?1:0,
		'#attributes' => array(
			
			' class' => 'styled-checkbox',
			
		),						
		'#title' => t('Remember me'),
		
	); 
	return $form;
}
//create log in function
function log_in($form, &$form_state){
	if(!empty($form["remember"]["#value"])) {
			setcookie ("member_login",$form["id"]["#value"],time()+ (10 * 365 * 24 * 60 * 60));
			setcookie ("member_password",$form["password"]["#value"],time()+ (10 * 365 * 24 * 60 * 60));
	} else {
		if(isset($_COOKIE["member_login"])) {
			setcookie ("member_login","");
		}
		if(isset($_COOKIE["member_password"])) {
			setcookie ("member_password","");
		}
	}
	loginManager($form["id"]["#value"], $form["password"]["#value"]);
}
//Create pd shopping cart form
function pd_shoppingcart_form($form, &$form_state){
    //this is remove mandatory credit card
    if(isset($_SESSION["UserId"])){
        $userid = $_SESSION["UserId"];
        $test['id'] = $_SESSION["UserId"];
        $cardsnum = aptify_get_GetAptifyData("12", $test);
       
    }
	$form['POSTPRF'] = array(
        '#type' => 'hidden',
        '#attributes' => array(' id' => 'POSTPRF'),
    );
    $form['CouponCode'] = array(
        '#type' => 'hidden',
    );
    if (sizeof($cardsnum["results"])!=0){
        $form['CardUsed'] = array(
            '#type' => 'hidden',
            '#attributes' => array(' id' => 'CardUsed'),
    
        );
    }
    $form['addCard'] = array(
        '#type' => 'hidden',
        '#default_value' => '0',
	);
    $PaymentTypecode  = file_get_contents("sites/all/themes/evolve/json/PaymentType.json");
	$PaymentType=json_decode($PaymentTypecode, true);
	$paymentArray = array();
	foreach($PaymentType  as $pair => $value){
		$key = $PaymentType[$pair]['ID'];
		$paymentArray[$key] = $PaymentType[$pair]['Name'];
    }
    
    $form['Cardtype'] = array(
		'#type' => 'select',
        '#title' => t('Payment method:'),
       	'#default_value' => '',
		'#attributes' => array(' class' => 'form-control'),
		'#options' => $paymentArray,
		//'#required' => TRUE,
	);
	
	$form['Cardname'] = array(
		'#type' => 'textfield',
		'#title' => t('Name on card:<span class="tipstyle">*</span>'),
		'#attributes' => array(
			
			' class' => 'form-control',
			' placeholder' => 'Name on card',
		),
		'#default_value' => '',
		//'#required' => TRUE,
	);
	$form['Cardnumber'] = array(
		'#type' => 'textfield',
		'#attributes' => array(
			//' type' => 'number', 
			' class' => 'form-control',
			' placeholder' => 'Card number',
		),
		'#title' => t('Card number:<span class="tipstyle">*</span>'),
		'#default_value' => '',
		'#maxlength' => 16,
		//'#required' => TRUE,
	);
	$form['Expirydate'] = array(
		'#type' => 'textfield',
		'#attributes' => array(
			//' type' => 'number', 
			' class' => 'form-control',
			' placeholder' => 'mmyy (eg: 0225)',
		),
		'#title' => t('Expiry date:<span class="tipstyle">*</span>'),
		'#default_value' => '',
		'#maxlength' => 4,
		//'#required' => TRUE,
	);
	$form['CCV'] = array(
		'#type' => 'textfield',
		'#attributes' => array(
			//' type' => 'number', 
			' class' => 'form-control',
			' placeholder' => 'CVV',
        ),
       
		'#title' => t('CVV:<span class="tipstyle">*</span>'),
		'#default_value' => '',
		'#maxlength' => 4,
		//'#required' => TRUE,
    );
    $form['addcardtag'] = array(
		'#type' => 'checkbox',
		'#attributes' => array(
            ' class' => 'styled-checkbox',
         ),
         '#default_value' => 0,	
         '#suffix'=>'<span class="save_card_msg">Paying for your APA membership via instalments? Are you using a different/new card to make this purchase?
Please note: if you opt to save this credit card, it will automatically become your default card for your instalment payments. If you wish to continue using your previous default card to make instalment payments, don’t save this card.</span>
					',		
		'#title' => t('Do you want to save this card?'),
	);
    
    $form['Message']['notice'] = array(
        '#markup' => '<div class="form-item form-type-textfield"><p class="payment_note">To confirm that we can receive payments from your nominated credit card a one off verification charge of $1 will be deducted from your account. This amount will be refunded immediately upon payment confirmation.</p></div>',
       
    );
    $form['submit'] = array('#type' => 'submit','#submit'=>['place_pd_shopping_cart']); 
	return $form;
}

function place_pd_shopping_cart($form, &$form_state){
    $OrderSend['userID'] = $_SESSION['UserId'];
    $OrderSend["PRFdonation"] = $form["POSTPRF"]["#value"];
    //get product ID
    $products = array();
	$pdProduct = getProduct($_SESSION['UserId'],"PD");
	if (sizeof($pdProduct) != 0) {
		foreach($pdProduct as $single){
			array_push($products, $single);
		}
    }
    $ngProduct = getProduct($_SESSION['UserId'],"PDNG");
    if (sizeof($ngProduct) != 0) {
		foreach($ngProduct as $singleNG){
			array_push($products, $singleNG);
		}
    }
    $mgProduct = getProduct($_SESSION['UserId'],"PDMG");
    if (sizeof($mgProduct) != 0) {
        foreach($mgProduct as $singleMG){
			array_push($products, $singleMG);
		}
	}
    $OrderSend["productID"] = $products;
    if(isset($form["CardUsed"]["#value"])) { 
       if($form["addCard"]["#value"]=="0"){
        
        $OrderSend["Card_number"] = $form["CardUsed"]["#value"];
        $OrderSend['PaymentTypeID'] = "";
        $OrderSend['CCNumber'] = "";
        $OrderSend['CCExpireDate'] = "";
        $OrderSend['CCSecurityNumber'] = "";
       }
       else{
    
        $OrderSend["Card_number"] = "";
        $OrderSend['PaymentTypeID'] = $form["Cardtype"]["#value"];
        $OrderSend['CCNumber'] = $form["Cardnumber"]["#value"];
        $OrderSend['CCExpireDate'] = $form["Expirydate"]["#value"];
        $OrderSend['CCSecurityNumber'] = $form["CCV"]["#value"];
       }
    }
    else{
        $OrderSend["Card_number"] = "";
        $OrderSend['PaymentTypeID'] = $form["Cardtype"]["#value"];
        $OrderSend['CCNumber'] = $form["Cardnumber"]["#value"];
        $OrderSend['CCExpireDate'] = $form["Expirydate"]["#value"];
        $OrderSend['CCSecurityNumber'] = $form["CCV"]["#value"];
    }
    $OrderSend['InsuranceApplied'] = 0;
	$OrderSend['Paymentoption'] = 0;
	$OrderSend['InstallmentFor'] = "Membership";
	$OrderSend['InstallmentFrequency'] = "";
    $OrderSend['CampaignCode'] = $form["CouponCode"]["#value"];
    $registerOuts = aptify_get_GetAptifyData("26", $OrderSend);
    //call add payment card endpoint if neccessary
    if(isset($form["addcardtag"]["#value"]) && $form["addcardtag"]["#value"]=="1"){
       
        $postPaymentData['userID'] = $_SESSION['UserId'];
        $postPaymentData['Payment-method'] = $form["Cardtype"]["#value"];
        $postPaymentData['Cardno'] = $form["Cardnumber"]["#value"];
        $postPaymentData['Expiry-date'] = $form["Expirydate"]["#value"];
        $postPaymentData['CCV'] = $form["CCV"]["#value"];
        $out = aptify_get_GetAptifyData("15",$postPaymentData);
        if($out["result"]=="Failed"){ 
            if($out["Message"]=="Expiry date lenght should be 4."){
                drupal_set_message('<div class="checkMessage">Please enter a valid expiry date.</div>',"error");
            }
            elseif($out["Message"]=="CCV accepts up to 4 digit."){
                drupal_set_message('<div class="checkMessage">Please enter a valid CCV number.</div>',"error");
            }
            elseif((strpos($out["Message"], 'Month must be between one and twelve') !== false)){
                drupal_set_message('<div class="checkMessage">Please enter a valid expiry date.</div>',"error");
            }
            elseif($out["Message"]=="Please enter a valid End Date occurring after the Start Date."){
                drupal_set_message('<div class="checkMessage">Please enter a valid expiry date.</div>',"error");
            }
            elseif((strpos($out["Message"], 'credit card number') !== false)){
                drupal_set_message('<div class="checkMessage">Please enter a valid credit card number.</div>',"error");
            }
            elseif((strpos($out["Message"], 'Invalid CCV number') !== false)){
                drupal_set_message('<div class="checkMessage">Please enter a valid CCV number.</div>',"error");
            }
            elseif($out["result"]=="Failed" && (strpos($out["Message"], 'Invalid Credit Card Number') !== false)){
                drupal_set_message('<div class="checkMessage">Please enter a valid credit card number.</div>',"error");
            }
            else{
                drupal_set_message('<div class="checkMessage">There was an unexpected error with your payment details, please go back and check they are correct, or contact the APA.</div>',"error");
            }
        }
    }
    //$recordOrder = array();
	//new array to record specific fields
	$recordOrder['userID'] = $OrderSend['userID'];
	$recordOrder['PRFdonation'] = $OrderSend['PRFdonation'];
	$recordOrder['Card_number'] = $OrderSend['Card_number'];
	$recordOrder['productID'] = $OrderSend['productID'];
	$recordOrder['PaymentTypeID'] = $OrderSend['PaymentTypeID'];
	if($OrderSend['CCNumber'] !=""){  $recordOrder['CCNumber'] = substr($OrderSend['CCNumber'], -4); }
	else{ $recordOrder['CCNumber'] = $OrderSend['CCNumber'];}
	$recordOrder['InsuranceApplied'] = $OrderSend['InsuranceApplied'];
	$recordOrder['Paymentoption'] = $OrderSend['Paymentoption'];
	$recordOrder['InstallmentFor'] = $OrderSend['InstallmentFor'];
	$recordOrder['InstallmentFrequency'] = $OrderSend['InstallmentFrequency'];
    $recordOrder['CampaignCode'] = $OrderSend['CampaignCode'];
    if(sizeof($registerOuts)!=0 && $registerOuts['Invoice_ID']!=="0") {
            $invoice_ID = $registerOuts['Invoice_ID'];
       
            //put extra code when using API to get the status of order, if it is successful, will save terms and conditions on APA side
            //save the terms and conditons on APA side
            $dataArray = array();
            $dataArray['MemberID'] = $_SESSION['UserId'];
            $dataArray['CreateDate']= date('Y-m-d');
            $dataArray['MembershipYear'] = "";
            $dataArray['ProductList'] = implode(",",$OrderSend["productID"]);
            $dataArray['Type'] = "P";
            forCreateRecordFunc($dataArray);
            // record member log for successful process
            if(isset($_SESSION['UserName'])){ $addMemberLog["userID"] = $_SESSION['UserName'];  } 
            $addMemberLog["orderID"] = "0";
            $addMemberLog["jsonMessage"] = json_encode($recordOrder)."<br/><br/>".json_encode($registerOuts);
            $addMemberLog["createDate"] = date('Y-m-d');
            $addMemberLog["type"] =  "PD";
            $addMemberLog["logError"] = 0;
            add_Member_Log($addMemberLog);
            // delete shopping cart data from APA database; put the response status validation here!!!!!!!
            $userID = $_SESSION["UserId"];
            $type = "PD";
            checkShoppingCart($userID, $type, $productID="");
            $type = "PDNG";
            checkShoppingCart($userID, $type, $productID="");
            $type = "PDMG";
            checkShoppingCart($userID, $type, $productID="");
            //add subscription 
            if(isset($_SESSION['UserId'])) {
            // 2.2.23 - GET list of subscription preferences
            // Send - 
            // UserID
            // Response -
            // List of subscriptions and its T/F values.
            $sendData["UserID"] = $_SESSION['UserId'];
            $subscriptions = aptify_get_GetAptifyData("23", $sendData);
            $Subscription = $subscriptions["results"];
            $ArrayReturn = Array();
            $ArrayReturn["UserID"] = $_SESSION['UserId'];
            // 2.2.22 - Get list of subscribed Fellowship Products
            // Send - 
            // UserID
            // Response -
            // List of Fellowship ID and its titles.
            $Fellows = aptify_get_GetAptifyData("22", $sendData);
            $MagSubs = Array();
            $Fellow = $Fellows["results"];
            foreach($Fellow as $Subs) {
                if(strpos($Subs["FPtitle"], "Magazine") !== false) {
                    $divs = explode(" ", $Subs["FPtitle"]);
                    if($divs[0] == "InTouch" || $divs[0] == "Sports") {
                        array_push($MagSubs, $divs[0]);
                    }
                }
            }
            $SubListAll = Array();
            $subArray = Array();
            $consArray = Array();
            foreach($Subscription as $Subs) {
                $ArrayRe["SubscriptionID"] = $Subs["ConsentID"];
                $arrayUpdate["ConsentID"] = $Subs["ConsentID"];
                if($Subs["ConsentID"] == '15') {
                    // APA email
                    $ArrayRe["Subscribed"] = $Subs["Subscribed"];
                    $arrayUpdate["Subscribed"] = $Subs["Subscribed"];
                } elseif($Subs["ConsentID"] == '18') {
                    // InMotion Copy
                    if($_SESSION['MemberTypeID'] == "31" || $_SESSION['MemberTypeID'] == "32" || $_SESSION['MemberTypeID'] == "34" || $_SESSION['MemberTypeID'] == "35" || $_SESSION['MemberTypeID'] == "36") {
                        // No InMotion print copy for 
                        // student (M7, M7a), Physiotherapy assistant (M9) and Associated (M10)
                        // and M11 Associated (Oversea)
                        $ArrayRe["Subscribed"] = '0';
                        $arrayUpdate["Subscribed"] = '0';
                    } else {
                        $ArrayRe["Subscribed"] = $Subs["Subscribed"];
                        $arrayUpdate["Subscribed"] = $Subs["Subscribed"];
                    }
                } else {
                    // InTouch and Sports
                    $ArrayRe["Subscribed"] = $Subs["Subscribed"];
                    $arrayUpdate["Subscribed"] = $Subs["Subscribed"];
                    if($Subs["ConsentID"] == '16' || $Subs["ConsentID"] == '17') {
                        foreach($MagSubs as $mags) {
                            $tts = strpos($Subs["Consent"], $mags);
                            if($tts !== FALSE) {
                                $ArrayRe["Subscribed"] = '1';//$Subs["Subscribed"];
                                $arrayUpdate["Subscribed"] = '1';//$Subs["Subscribed"];
                            }
                        }
                    }
                }
                array_push($consArray, $arrayUpdate);
                $ArrayRe["Subscription"] = $Subs["Consent"];
                array_push($SubListAll, $ArrayRe);
            }
            $ArrayReturn["Subscriptions"] = $subArray;
            $ArrayReturn["Consents"] = $consArray;
            // 2.2.24 - Update subscription preferences
            // Send - 
            // UserID, List of subscriptions and its F/F values.
            // Response -
            // Response, List of subscriptions and it's T/F values.
            $subscriptions = aptify_get_GetAptifyData("24", $ArrayReturn);
            drupal_goto('/pd/completed-purchase',array('query' => array('status' => '1')));
            
        }
    else{
        //this is handle record error log
      
        if(isset($_SESSION['UserName'])){ $addMemberLog["userID"] = $_SESSION['UserName'];  } 
        $addMemberLog["orderID"] = "0";
        $addMemberLog["jsonMessage"] = json_encode($recordOrder)."<br/><br/>".json_encode($registerOuts);
        $addMemberLog["createDate"] = date('Y-m-d');
        $addMemberLog["type"] =  "PD";
        $addMemberLog["logError"] = 1;
        add_Member_Log($addMemberLog);
        drupal_goto('/pd/completed-purchase',array('query' => array('status' => '0')));
       
    }
    logRecorder(); 
    //add drupal form redirct function
    }	
}
//create add payment card form
function apa_create_payment_card_form($form, &$form_state){
	$PaymentTypecode  = file_get_contents("sites/all/themes/evolve/json/PaymentType.json");
	$PaymentType=json_decode($PaymentTypecode, true);
	$paymentArray = array();
	foreach($PaymentType  as $pair => $value){
		$key = $PaymentType[$pair]['ID'];
		$paymentArray[$key] = $PaymentType[$pair]['Name'];
	}
	//$form['#id'] = 'addPaymentCardForm';
    $form['addCard'] = array(
		'#type' => 'hidden',
	);
	$form['Cardtype'] = array(
		'#type' => 'select',
		'#title' => t('Payment method:'),
		'#default_value' => '',
		'#attributes' => array(' class' => 'form-control'),
		'#options' => $paymentArray,
		'#required' => TRUE,
	);
	$form['Cardname'] = array(
		'#type' => 'textfield',
		'#title' => t('Name on card:'),
		'#attributes' => array(
			
			' class' => 'form-control',
			' placeholder' => 'Name on card',
		),
		'#default_value' => '',
		'#required' => TRUE,
	);
	$form['Cardnumber'] = array(
		'#type' => 'textfield',
		'#attributes' => array(
			//' type' => 'number', 
			' class' => 'form-control',
			' placeholder' => 'Card number',
		),
		'#title' => t('Card number:'),
		'#default_value' => '',
		'#maxlength' => 16,
		'#required' => TRUE,
	);
	$form['Expirydate'] = array(
		'#type' => 'textfield',
		'#attributes' => array(
			//' type' => 'number', 
			' class' => 'form-control',
			' placeholder' => 'mmyy (eg: 0225)',
		),
		'#title' => t('Expiry date:'),
		'#default_value' => '',
		'#maxlength' => 4,
		'#required' => TRUE,
	);
	$form['CCV'] = array(
		'#type' => 'textfield',
		'#attributes' => array(
			//' type' => 'number', 
			' class' => 'form-control',
			' placeholder' => 'CVV',
		),
		'#title' => t('CVV:'),
		'#default_value' => '',
		'#maxlength' => 4,
		'#required' => TRUE,
	);
    //$form['submit'] = array('#type' => 'submit', '#value' => t('Add')); 
    $form['Message']['notice'] = array(
        '#markup' => '<div class="form-item form-type-textfield"><p class="payment_note">To confirm that we can receive payments from your nominated credit card a one off verification charge of $1 will be deducted from your account. This amount will be refunded immediately upon payment confirmation.</p></div>',
    );
    $form['submit'] = array('#type' => 'submit', '#value' => t('Add'), '#submit'=>['add_payment_card']); 
	return $form;
}
function add_payment_card($form, &$form_state){
    $postPaymentData['userID'] = $_SESSION['UserId'];
	$postPaymentData['Payment-method'] = $form["Cardtype"]["#value"];
	$postPaymentData['Cardno'] = $form["Cardnumber"]["#value"];
	$postPaymentData['Expiry-date'] = $form["Expirydate"]["#value"];
	$postPaymentData['CCV'] = $form["CCV"]["#value"];
	$out = aptify_get_GetAptifyData("15",$postPaymentData);
	$_SESSION["paymentTabTag"]=1;
	if($out["result"]=="Failed"){ 
		if($out["Message"]=="Expiry date lenght should be 4."){
			drupal_set_message('<div class="checkMessage">Please enter a valid expiry date.</div>',"error");
		}
		elseif($out["Message"]=="CCV accepts up to 4 digit."){
			drupal_set_message('<div class="checkMessage">Please enter a valid CCV number.</div>',"error");
		}
		elseif((strpos($out["Message"], 'Month must be between one and twelve') !== false)){
			drupal_set_message('<div class="checkMessage">Please enter a valid expiry date.</div>',"error");
		}
		elseif($out["Message"]=="Please enter a valid End Date occurring after the Start Date."){
			drupal_set_message('<div class="checkMessage">Please enter a valid expiry date.</div>',"error");
		}
		elseif((strpos($out["Message"], 'credit card number') !== false)){
			drupal_set_message('<div class="checkMessage">Please enter a valid credit card number.</div>',"error");
        }
        elseif((strpos($out["Message"], 'Invalid CCV number') !== false)){
			drupal_set_message('<div class="checkMessage">Please enter a valid CCV number.</div>',"error");
		}
		elseif($out["result"]=="Failed" && (strpos($out["Message"], 'Invalid Credit Card Number') !== false)){
			drupal_set_message('<div class="checkMessage">Please enter a valid credit card number.</div>',"error");
		}
		else{
			drupal_set_message('<div class="checkMessage">There was an unexpected error with your payment details, please go back and check they are correct, or contact the APA.</div>',"error");
		}
	}
}
/*
create renew landing page hidden form
*/
function apa_renew_landingpage_form($form, &$form_state){
    $form['submit'] = array('#type' => 'submit','#value' => t('submit'), '#submit'=>['renew_landingpage_login']); 
    return $form;
}
/*
create session for the renew logic 
*/
function renew_landingpage_login($form, &$form_state){
  
    $_SESSION["renewTag"]=1;
    // keep this session for half hour
  	$_SESSION['expireTag'] = time() + (30 * 60);
}
/*
function _apa_sso_login_form_validate($form, &$form_state) {
    //  Any validation you want to do here.
    //  Submitted values are available in $form_state variable.
    //  i.e., $form_state['username'][0]['value'] will give you the value of what user submitted.
}

*/
function _apa_sso_login($form, &$form_state) {

    // Capture the values entered to the form in variables
    $id = $form["username"]["#value"];
    $password = $form["password"]["#value"];

    // If user is logged-in already redirect user to pageA.
    if(_apa_sso_check_login_status($id, $password)){
        drupal_goto('path/to/pageA');
        exit;
    }

    //  If not then check user for login.
    //  Ideally this would be inside try-catch block.
    //  For simplicity I am using if statements.
    $meta_information = loginSSO($id,$password);

    if(!$meta_information) {
        // Do redirection to SAML

        _apa_redirect_saml($meta_information);
        drupal_set_message(t('You are now logged in'), 'status');

    } else {
        //  This is how Drupal shows the error message.
        drupal_set_message(t('Username or password wrong. Process did not complete.'), 'error');
        //  This is how you log to Drupal.

    }
}

/**
 * Function to determine if user is loggedin.
 * @param $id
 * @param $password
 * @return boolean
 */
function _apa_sso_check_login_status($id, $password){
    $result = false;
    //Check if user is already logged in.
    return $result;
}

/**
 * Function to determine
 * @param $meta_information
 */
function _apa_redirect_saml($meta_information) {
    //  Send user to SAML with token.
    //  Do whatever it needs to do and redirect from there.
    // You can get 'Global' information we set from variable_get() function.
    // i.e., to get IDP URL you will use variable_get('apa_sso_idp');
    //       which we set in apa_sso_admin.inc file.
}

/**
 * Function to login user to SSO.
 * @param $id
 * @param $pass
 * @return array
 */
function loginSSO($id, $pass) {
    // 2.2.7 - log-in
    // Send -
    // UserID, User password
    // Response -
    // log-in
    $arrIn["ID"] = $id;
    $arrIn["Password"] = $pass;
    $Got = GetAptifyData("7", $arrIn);
    logRecorder();
    if(isset($Got["ErrorInfo"])) {
        //echo $Got["ErrorInfo"]["ErrorMessage"];
        return ["log-in fail", $Got["ErrorInfo"]["ErrorMessage"]];
    } else {
        $ThirdParty = $_SESSION["thirdParty"];
        $LoginStatus = "1";
        $options = "Initial login slnpage";
        // logged in
        $returnSSO["UserId"] = $Got["UserId"];
        $returnSSO["UserName"] = $Got["UserName"];
        $returnSSO["Email"] = $Got["Email"];
        $returnSSO["FirstName"] = $Got["FirstName"];
        $returnSSO["LastName"] = $Got["LastName"];
        $returnSSO["Title"] = $Got["Title"];
        $returnSSO["LinkId"] = $Got["LinkId"];
        $returnSSO["CompanyId"] = $Got["CompanyId"];
        $returnSSO["TokenId"] = $Got["TokenId"];
        $returnSSO["Server"] = $Got["Server"];
        $returnSSO["Database"] = $Got["Database"];
        $returnSSO["AptifyUserID"] = $Got["AptifyUserID"];

        $RecordAll = json_encode($returnSSO, true);
        $date = date('Y-m-d h:i:s');
        // Create db data
        $dbt = new PDO('mysql:host=192.168.64.100;port=32770;dbname=apa_extra_information', 'user', 'user');
        // Create log

        $SSOlogCreate = $dbt->prepare('INSERT INTO ssolog (Provider, User, Token, LogDateTime, LogIO, Data, OptionString) VALUES (:Provider, :User, :Token, :LogDateTime, :LogIO, :Data, :Option)');
        $SSOlogCreate->bindParam(':Provider', $ThirdParty);
        $SSOlogCreate->bindParam(':User', $returnSSO["UserName"]);
        $SSOlogCreate->bindParam(':Token', $returnSSO["TokenId"]);
        $SSOlogCreate->bindParam(':LogDateTime', $date);
        $SSOlogCreate->bindParam(':LogIO', $LoginStatus);
        $SSOlogCreate->bindParam(':Data', $RecordAll);
        $SSOlogCreate->bindParam(':Option', $options);
        if(!$SSOlogCreate->execute()) {
            echo "<br />RunFail- SSOlogCreate<br>";
            print_r($SSOlogCreate->errorInfo());
        }

        // Create data
        $SSODataCreate = $dbt->prepare('INSERT INTO ssodata (Token, DateTime, Data) VALUES (:Token, :DateTime, :Data)');
        $SSODataCreate->bindParam(':Token', $returnSSO["TokenId"]);
        $SSODataCreate->bindParam(':DateTime', $date);
        $SSODataCreate->bindParam(':Data', $RecordAll);
        if(!$SSODataCreate->execute()) {
            echo "<br />RunFail- SSODataCreate<br>";
            print_r($SSODataCreate->errorInfo());
        }

        $SSOlogCreate = null;
        $SSODataCreate = null;
        $dbt = null;

        return $returnSSO;
    }
    return false;
}
